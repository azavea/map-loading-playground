import Head from "next/head";
import Link from "next/link";
import { useState, useEffect, useReducer } from "react";

import Page from "/components/Page";
import Map from "/components/Map";
import styles from "/styles/App.module.css";

export default function Detail({ community, communities }) {
  const initialState = {
    count: 1,
    transition: 200,
    delay: 0,
    "background-color": "#dddddd",
    "skeleton-color": "light",
    preload: "skeleton",
    postload: "transition",
  };

  function handleFormChange(e) {
    dispatch({
      type: "FORM_CHANGE",
      field: e.target.name,
      payload: e.target.value,
    });
  }

  function reducer(state, action, payload) {
    switch (action.type) {
      case "update":
        return { ...state, isRunning: true };
      case "stop":
        return { ...state, isRunning: false };
      case "reset":
        return { isRunning: false, time: 0 };
      case "FORM_CHANGE":
        console.log(action, action.field, action.payload);
        return { ...state, [action.field]: action.payload };
      case "tick":
        return { ...state, count: state.count + 1 };
      default:
        throw new Error();
    }
  }

  const [state, dispatch] = useReducer(reducer, initialState);

  function foo() {
    dispatch({ type: "tick" });
  }

  return (
    <Page>
      <Head>
        <title>Philadelphia Overview</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="panel">
        <h3>Controls</h3>
        <fieldset>
          <label htmlFor="transition">Delay</label>
          <input
            onChange={(e) => handleFormChange(e)}
            type="number"
            name="delay"
            min="0"
            defaultValue={state.delay}
            id="delay"
          />
        </fieldset>
        <fieldset>
          <label htmlFor="preload">Preload</label>
          <select
            defaultValue={state.preload}
            onChange={(e) => handleFormChange(e)}
            name="preload"
            id="preload"
          >
            <option value="solid">Solid color</option>
            <option value="skeleton">Skeleton</option>
            <option value="spinner">Spinner</option>
          </select>
        </fieldset>
        {state.preload === "skeleton" && (
          <fieldset>
            <label htmlFor="skeleton-color">Skeleton color</label>
            <select
              onChange={(e) => handleFormChange(e)}
              name="skeleton-color"
              id="skeleton-color"
              defaultValue={state["skeleton-color"]}
            >
              <option value="light">Light gray</option>
              <option value="dark">Dark gray</option>
            </select>
          </fieldset>
        )}
        {state.preload === "solid" && (
          <fieldset>
            <label htmlFor="background-color">Color</label>
            <input
              onChange={(e) => handleFormChange(e)}
              type="color"
              defaultValue={state["background-color"]}
              name="background-color"
              id="background-color"
            />
          </fieldset>
        )}
        <fieldset>
          <label htmlFor="postload">Postload</label>
          <select
            defaultValue={state.postload}
            onChange={(e) => handleFormChange(e)}
            name="postload"
            id="postload"
          >
            <option value="transition">Transition</option>
            <option value="default">Default</option>
          </select>
        </fieldset>
        {state.postload === "transition" && (
          <fieldset>
            <label htmlFor="transition">Transition</label>
            <input
              onChange={(e) => handleFormChange(e)}
              type="number"
              name="transition"
              min="0"
              defaultValue={state.transition}
              id="transition"
            />
          </fieldset>
        )}

        <button onClick={foo}>
          Reload map {state.postload} / {state.transition}
        </button>
      </div>
      <Map
        delay={state.delay}
        preload={state.preload}
        postload={state.postload}
        key={state.count}
      />
      <style global jsx>{`
        ${state.postload === "transition" ? `.map {
          transition: opacity ${state.transition}ms ease-in-out
        }` : ""}
        .panel {
          position: absolute;
          z-index: 100000;
          background-color: #fff;
          padding: 10px;
          top: 10px;
          left: 10px;
        }
        h3 {
          margin-top: 0;
          margin-bottom: 10px;
        }
        .map-container {
          background: ${state["background-color"]};
          background-size: 400% 100%;
          ${
            state.preload === "skeleton" && state["skeleton-color"] === "light"
              ? `background-image: linear-gradient(
            270deg,
            #bbb,
            #ddd,
            #ddd,
            #bbb
          `
              : ""
          });
          ${
            state.preload === "skeleton" && state["skeleton-color"] === "dark"
              ? `background-image: linear-gradient(
            270deg,
            #111,
            #333,
            #333,
            #111
          `
              : ""
          });
          animation: skeleton 8s ease-in-out infinite;
        }

        ${
          state.preload === "skeleton"
            ? ` @keyframes skeleton {
          0% {
            background-position: 200% 0;
          }
          to {
            background-position: -200% 0;
          }
        }`
            : ""
        }

        }
      `}</style>
    </Page>
  );
}
